import pygame
import time
import math
import sys

# formats data as: ['Name: Fact and has enrichment at 00:00', ect]
userInputTypes = { 'left': 1, 'right': 3 }
def format(s): return s.replace('"', '').replace("[", "").replace("]", "").replace(",", " and has enrichment at").replace('\n', "")
data = open('teachers.txt', 'r').read().split("||")
teachers = [format(data[i]) for i in range(77)] # teacher[x] = Albe: Likes boys and has enrichment at 2:30AM
window = None

# formats points to match the map
xOffset, yOffset = -10, 50
rooms = [(164, 211), (101, 316), (104, 366), (101, 429), (121, 605), (119, 662), (116, 793), (207, 325), (305, 811), (350, 674), (358, 722), (400, 395), (419, 475), (479, 637), (482, 700), (483, 758), (488, 820), (545, 889), (523, 381), (523, 477), (621, 392), (604, 480), (598, 641), (606, 703), (605, 764), (744, 192), (730, 242), (722, 311), (724, 397), (693, 471), (855, 190), (865, 244), (881, 311), (874, 396), (873, 473), (753, 595), (1088, 206), (1083, 314), (1103, 512), (1107, 619), (1070, 841), (1074, 921), (1158, 226), (1164, 303), (1150, 519), (1163, 648), (1157, 832), (1168, 920), (1230, 317), (1246, 511), (1256, 635), (1236, 841), (1242, 935), (1341, 219), (1348, 311), (1336, 524), (1342, 623), (1499, 216), (1507, 312), (1501, 515), (1515, 614), (1587, 212), (1593, 315), (1593, 518), (1590, 615), (1665, 212), (1667, 328), (1677, 515), (1685, 621), (1681, 812), (1699, 950), (1756, 221), (1768, 315), (1772, 519), (1780, 620), (1754, 837), (1752, 943)]
allPositions = [[176, 189], [177, 214], [176, 243], [180, 276], [179, 300], [181, 327], [184, 351], [185, 377], [183, 408], [111, 266], [144, 270], [114, 316], [134, 321], [162, 322], [111, 379], [129, 384], [156, 382], [217, 275], [209, 371], [242, 372], [278, 374], [280, 396], [300, 372], [324, 373], [350, 376], [285, 415], [285, 436], [349, 347], [379, 346], [410, 345], [359, 405], [356, 427], [356, 443], [356, 466], [356, 485], [356, 509], [356, 531], [386, 424], [429, 425], [410, 430], [379, 483], [404, 483], [427, 486], [462, 484], [498, 484], [523, 479], [550, 481], [580, 484], [623, 483], [604, 481], [673, 481], [648, 480], [724, 484], [758, 486], [706, 482], [531, 461], [537, 442], [533, 427], [614, 430], [617, 443], [617, 458], [703, 421], [705, 441], [707, 461], [352, 553], [335, 556], [321, 557], [306, 558], [302, 556], [275, 557], [255, 557], [245, 557], [203, 558], [186, 555], [227, 561], [189, 526], [190, 502], [171, 555], [152, 556], [131, 555], [129, 612], [150, 612], [177, 612], [178, 593], [178, 577], [179, 627], [183, 645], [186, 674], [186, 670], [188, 686], [188, 704], [188, 721], [188, 741], [162, 743], [153, 743], [126, 743], [304, 575], [304, 590], [304, 616], [305, 632], [306, 648], [308, 662], [308, 681], [308, 703], [326, 624], [360, 624], [329, 680], [368, 672], [357, 684], [313, 725], [314, 740], [315, 761], [315, 782], [316, 808], [316, 822], [317, 836], [317, 856], [317, 877], [317, 892], [317, 917], [189, 758], [193, 784], [193, 801], [193, 816], [550, 501], [550, 524], [553, 546], [552, 565], [553, 581], [554, 601], [554, 618], [559, 636], [560, 648], [559, 671], [559, 692], [560, 705], [558, 716], [558, 730], [558, 746], [556, 772], [556, 757], [557, 808], [555, 839], [555, 826], [555, 791], [556, 856], [556, 875], [557, 892], [558, 916], [498, 770], [519, 767], [536, 767], [493, 708], [515, 708], [540, 709], [492, 650], [524, 646], [543, 649], [509, 646], [489, 587], [514, 587], [538, 588], [582, 589], [608, 591], [583, 647], [609, 642], [616, 653], [586, 715], [615, 714], [609, 712], [582, 716], [581, 777], [601, 777], [620, 777], [757, 505], [762, 526], [763, 545], [765, 560], [767, 588], [767, 620], [769, 634], [765, 646], [766, 663], [768, 676], [768, 694], [575, 892], [593, 892], [608, 892], [630, 894], [660, 894], [689, 893], [720, 893], [717, 893], [730, 892], [766, 894], [785, 894], [815, 892], [847, 892], [347, 319], [348, 294], [376, 293], [395, 292], [424, 292], [452, 285], [475, 284], [490, 284], [511, 293], [536, 291], [555, 291], [574, 292], [598, 292], [618, 292], [628, 290], [630, 312], [632, 323], [631, 342], [528, 305], [531, 314], [533, 331], [776, 479], [800, 477], [812, 477], [814, 463], [813, 441], [813, 411], [811, 392], [812, 364], [808, 342], [805, 342], [776, 342], [769, 342], [753, 344], [734, 347], [810, 317], [810, 285], [811, 269], [810, 251], [810, 238], [810, 220], [808, 204], [814, 173], [810, 187], [813, 143], [814, 154], [843, 140], [865, 140], [832, 141], [797, 141], [785, 142], [767, 142], [754, 142], [740, 192], [758, 196], [784, 196], [775, 193], [732, 261], [751, 261], [772, 262], [794, 262], [835, 263], [860, 262], [891, 261], [917, 263], [832, 195], [854, 195], [875, 194], [835, 346], [866, 346], [884, 346], [833, 425], [858, 425], [883, 423], [829, 486], [855, 491], [886, 494], [824, 492], [787, 543], [801, 545], [824, 543], [828, 543], [857, 540], [878, 539], [843, 540], [786, 613], [812, 614], [839, 614], [866, 615], [771, 602], [770, 573], [776, 707], [778, 726], [808, 728], [791, 730], [838, 729], [828, 729], [861, 731], [880, 732], [760, 898], [867, 898], [886, 898], [898, 898], [916, 896], [934, 896], [953, 899], [973, 899], [1000, 899], [1022, 898], [1019, 878], [1019, 869], [1020, 847], [1021, 828], [1021, 816], [1021, 799], [1019, 777], [1016, 753], [1015, 739], [1014, 725], [1014, 709], [1015, 694], [1015, 678], [1013, 658], [1013, 647], [1013, 637], [1011, 613], [1016, 588], [1016, 576], [1016, 599], [1019, 556], [1019, 536], [1017, 520], [1013, 493], [1013, 482], [1013, 460], [1011, 434], [1011, 444], [1008, 419], [1008, 401], [1008, 394], [1007, 380], [1005, 361], [1004, 331], [1004, 346], [1002, 307], [1000, 293], [1001, 264], [1004, 275], [1002, 235], [1003, 220], [1005, 245], [1039, 838], [1058, 840], [1078, 839], [1094, 839], [1117, 838], [1136, 835], [1154, 835], [1182, 836], [1163, 836], [1206, 837], [1220, 837], [1242, 837], [1259, 837], [1283, 837], [1283, 837], [1299, 836], [1309, 831], [1331, 832], [1345, 833], [1367, 833], [1389, 837], [1413, 838], [1426, 835], [1453, 835], [1476, 835], [1489, 836], [1506, 836], [1537, 835], [1565, 835], [1549, 836], [1587, 836], [1608, 835], [1636, 834], [1637, 834], [1658, 833], [1693, 831], [1679, 830], [1712, 833], [1730, 833], [1749, 833], [1767, 831], [1578, 812], [1582, 797], [1582, 790], [1581, 775], [1581, 745], [1582, 760], [1579, 723], [1600, 723], [1600, 764], [1605, 797], [1594, 799], [1616, 847], [1618, 862], [1619, 885], [1713, 839], [1713, 862], [1711, 884], [1709, 900], [1709, 873], [1709, 860], [1757, 843], [1758, 860], [1760, 878], [1762, 893], [1691, 817], [1690, 795], [1690, 793], [1692, 774], [1691, 762], [1760, 823], [1764, 805], [1764, 791], [1764, 787], [1032, 677], [1050, 680], [1077, 680], [1068, 678], [1098, 683], [1109, 682], [1038, 514], [1053, 513], [1071, 513], [1093, 511], [1119, 511], [1130, 511], [1142, 512], [1163, 513], [1183, 513], [1200, 513], [1218, 514], [1247, 513], [1237, 513], [1273, 514], [1286, 514], [1309, 512], [1325, 512], [1344, 513], [1368, 512], [1383, 512], [1402, 513], [1425, 511], [1437, 510], [1462, 510], [1474, 510], [1498, 509], [1519, 509], [1547, 512], [1557, 512], [1590, 512], [1576, 509], [1613, 513], [1627, 508], [1637, 510], [1649, 514], [1674, 514], [1700, 513], [1717, 517], [1739, 513], [1766, 515], [1112, 498], [1113, 479], [1113, 462], [1112, 536], [1113, 550], [1117, 569], [1160, 500], [1160, 481], [1160, 469], [1172, 536], [1173, 545], [1174, 569], [1174, 574], [1173, 598], [1173, 596], [1177, 580], [1175, 564], [1254, 493], [1249, 472], [1256, 461], [1261, 478], [1258, 530], [1260, 539], [1263, 549], [1266, 570], [1266, 585], [1346, 498], [1346, 490], [1346, 478], [1346, 474], [1346, 527], [1349, 546], [1349, 557], [1352, 573], [1438, 505], [1437, 487], [1437, 486], [1438, 475], [1512, 497], [1511, 481], [1511, 465], [1522, 519], [1523, 527], [1523, 543], [1523, 546], [1525, 564], [1602, 507], [1601, 486], [1603, 468], [1597, 526], [1600, 546], [1600, 565], [1687, 465], [1687, 477], [1689, 480], [1689, 493], [1692, 527], [1694, 543], [1695, 559], [1695, 571], [1783, 491], [1782, 469], [1782, 469], [1779, 525], [1781, 537], [1788, 555], [1790, 570], [1023, 219], [1040, 217], [1053, 215], [1078, 216], [1099, 219], [1124, 210], [1138, 212], [1161, 213], [1185, 211], [1209, 211], [1228, 213], [1244, 214], [1267, 213], [1286, 213], [1303, 210], [1321, 211], [1340, 211], [1365, 211], [1386, 213], [1395, 213], [1417, 211], [1433, 210], [1457, 208], [1465, 208], [1479, 208], [1502, 204], [1532, 205], [1528, 205], [1515, 206], [1561, 206], [1576, 205], [1596, 205], [1606, 204], [1627, 206], [1650, 205], [1672, 205], [1692, 205], [1712, 205], [1726, 205], [1751, 205], [1775, 205], [1787, 204], [1079, 815], [1080, 803], [1080, 791], [1083, 847], [1083, 855], [1084, 871], [1174, 810], [1167, 782], [1171, 793], [1175, 843], [1176, 858], [1178, 870], [1179, 820], [1246, 823], [1246, 807], [1246, 791], [1251, 852], [1251, 856], [1253, 866], [1252, 885], [1345, 817], [1347, 803], [1347, 795], [1347, 850], [1348, 864], [1350, 882], [1099, 198], [1099, 183], [1098, 156], [1090, 231], [1092, 250], [1093, 264], [1100, 173], [1168, 194], [1168, 176], [1168, 159], [1174, 221], [1174, 240], [1174, 253], [1228, 201], [1237, 182], [1237, 181], [1237, 173], [1282, 201], [1282, 187], [1282, 174], [1237, 236], [1239, 242], [1239, 256], [1240, 267], [1352, 199], [1351, 182], [1351, 169], [1358, 224], [1358, 243], [1358, 261], [1426, 204], [1427, 179], [1427, 168], [1429, 197], [1430, 236], [1432, 252], [1434, 274], [1507, 194], [1509, 179], [1509, 166], [1515, 223], [1516, 236], [1516, 246], [1517, 262], [1599, 185], [1597, 162], [1598, 171], [1600, 216], [1601, 239], [1601, 232], [1603, 249], [1603, 265], [1675, 162], [1677, 173], [1678, 184], [1677, 217], [1675, 229], [1676, 242], [1677, 261], [1677, 278], [1767, 191], [1766, 181], [1766, 171], [1772, 220], [1774, 237], [1777, 249], [1778, 265], [174, 161],[1778, 878], [1829, 884], [1810, 883], [1842, 861], [1848, 838], [1847, 825], [1851, 799], [1853, 780], [1853, 759], [1851, 745], [1848, 713], [1848, 682], [1847, 664], [1849, 694], [1846, 639], [1845, 620], [1845, 602], [1846, 577], [1844, 553], [1843, 535], [1842, 502], [1843, 521], [1840, 485], [1840, 473], [1839, 462], [1839, 442], [1842, 414], [1842, 427], [1842, 393], [1840, 371], [1840, 353], [1840, 340], [1841, 314], [1838, 293], [1838, 265], [1830, 269], [1825, 267], [1815, 267], [1842, 285], [1811, 573], [1826, 573]]
for i in range(len(allPositions)):
    allPositions[i][0] += xOffset
    allPositions[i][1] += yOffset

class PathFinder:
    def __init__(self, allPoints):
        self.allPoints = [tuple(p) for p in allPoints]  # Convert all points to tuples
        self.openList = []
        self.closedList = []
        self.parents = {}
        self.gCosts = {}
        self.fCosts = {}

    def distance(self, point1, point2):
        return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

    def reconstructPath(self, current):
        path = [current]

        while current in self.parents:
            current = self.parents[current]
            path.append(current)
        path.reverse()

        return path

    def getNeighbors(self, point):
        neighbors = []
        for p in self.allPoints:
            if self.distance(point, p) <= 50:  
                neighbors.append(tuple(p))  

        return neighbors

    def findPath(self, start, goal):
        self.openList = [start]
        self.closedList = []
        self.parents = {}
        self.gCosts = {start: 0}
        self.fCosts = {start: self.distance(start, goal)}
        
        while len(self.openList) > 0:
            current = min(self.openList, key=lambda point: self.fCosts.get(point, float('inf')))
            if current == goal: return self.reconstructPath(current)
    
            self.openList.remove(current)
            self.closedList.append(current)
            
            for neighbor in self.getNeighbors(current):
                if neighbor in self.closedList:
                    continue
                
                tentative = self.gCosts[current] + self.distance(current, neighbor)
                if neighbor not in self.openList: self.openList.append(neighbor)
                if tentative >= self.gCosts.get(neighbor, float('inf')): continue
                
                self.parents[neighbor] = current
                self.gCosts[neighbor] = tentative
                self.fCosts[neighbor] = tentative + self.distance(neighbor, goal)
        
        return None

    def getClosestPoint(self, point, arr=allPositions, limit=9999):
        closestPoint = arr[0]

        for i in range(len(arr)):
            dist = self.distance(point, arr[i])
            if dist < self.distance(point, closestPoint) and dist < limit:
                closestPoint = arr[i]

        if self.distance(point, closestPoint) > limit: return None
        return (closestPoint[0], closestPoint[1])

def draw(x, y, loc):
    imp = pygame.image.load(loc).convert_alpha()
    window.blit(imp, (x, y))

def drawLine(pointA, pointB, thickness):
    pygame.draw.line(screen, Color_line, pointA, pointB, thickness)
    pygame.display.flip()

pygame.font.init()
flil = pygame.font.SysFont('Comic Sans MS', 30)
fbig = pygame.font.SysFont('Comic Sans MS', 50)
def setText(x, y, text, s='', font=flil):
    pygame.draw.rect(window, '#B7AEBF', pygame.Rect(x, y, 750, 30))
    text_surface = font.render(f'{s}{text}', False, (0, 0, 0))
    window.blit(text_surface, (x, y))
    pygame.display.flip()

def quitRuntime(): pygame.quit(); sys.exit()
def initiation(wid=1920, hei=1080):
    global window
    pygame.init()
    window = pygame.display.set_mode((wid, hei))
    pygame.display.set_caption('School Map')
    window.fill('#B7AEBF')  

    draw(940+xOffset, 50+yOffset, 'stem.png')
    draw(-15+xOffset, 50+yOffset, 'main.png')
    pygame.display.update()

    setText(1150, 75, 'Not Brentwood Highschool Highschool', '', fbig)
    
# HEX: #B7AEBF
pathFind = PathFinder(allPositions)
pointA, infoA, txtA = None, None, None
pointB, infoB, txtB = None, None, None

def teacherInfo(event):
    global pointA; global infoA
    global pointB; global infoB
    error = 'A teacherless body is selected.'

    try: 
        room = pathFind.getClosestPoint(event.pos, rooms, 35)
        if not room: return error
        return teachers[rooms.index(room)]
    except: return error

def keyClicks(event):
    global pointA; global infoA
    global pointB; global infoB
    if event.type == pygame.MOUSEBUTTONDOWN:
        if event.button == userInputTypes['left']:
            pointA = pathFind.getClosestPoint(event.pos)
            infoA = teacherInfo(event)

        elif event.button == userInputTypes['right']:
            pointB = pathFind.getClosestPoint(event.pos)
            infoB = teacherInfo(event)

    # clear window
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_q:
            window.fill('#B7AEBF')
            initiation()
            pygame.display.flip()

extra = []
def runtime():
    global pointA; global infoA
    global pointB; global infoB
    paX, paY = (75, 55)
    pbX, pbY = (75, 95)
    # global extra
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT: quitRuntime()
        keyClicks(event)

        """ -- Mappping Detection for Debugging
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == userInputTypes['left']:
                spot = event.pos# pathFind.getClosestPoint(event.pos)
                extra.append(spot)
                draw(spot[0], spot[1], 'dot.png')

                print(extra)
        """
        if infoA: setText(paX, paY, infoA, "Point A: "); infoA = None
        if infoB: setText(pbX, pbY, infoB, "Point B: "); infoB = None
        if pointA and pointB:
            path = pathFind.findPath(pointA, pointB)
            pointA, pointB = None, None

            for i in range(len(path) - 1):
                pygame.draw.line(window, (255, 0, 0), path[i], path[i+1], 10)
                # pygame.display.flip()
                
            pygame.display.update()

    pygame.display.flip()

initiation()
running = True
while running: runtime()

pygame.quit()